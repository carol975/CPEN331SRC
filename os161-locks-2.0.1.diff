Diff from os161-base-2.0.1 to os161-locks-2.0.1.
To apply, run patch -p1 < thispatchfile in the top level directory
of the OS/161 tree.

diff -r 42983cfffb6e -r 0282fdd59c4b CHANGES.locks
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/CHANGES.locks	Wed Aug 05 16:01:42 2015 -0400
@@ -0,0 +1,21 @@
+Solution set 1 (locks) was written by David A. Holland and Daniel Margo.
+
+------------------------------------------------------------
+
+(Also see CHANGES.)
+
+20150805 dholland	locks-2.0.1 released.
+20150115 dholland	locks-2.0 released.
+20140924 dholland	locks-1.99.08 released.
+20140123 dholland	locks-1.99.07 released.
+20140122 dholland	lock_acquire should assert if you lock your own lock.
+20131106 dholland	Adjust to wchan changes in base.
+
+20100107 dholland	Fix volatility of struct lock->lk_holder.
+
+20080219 dholland	sol1-1.99.02 released.
+20080219 dholland	Mention solution code in the bootup text.
+20080213 dholland	Fix some silly problems.
+20080210 dholland	New locks and CVs implementation for OS/161 2.x.
+20080210 dmargo		Solution for the bathroom problem.
+20080210 dmargo		Import old whalemating solution.
diff -r 42983cfffb6e -r 0282fdd59c4b kern/include/synch.h
--- a/kern/include/synch.h	Wed Aug 05 15:58:15 2015 -0400
+++ b/kern/include/synch.h	Wed Aug 05 16:01:42 2015 -0400
@@ -74,8 +74,9 @@ void V(struct semaphore *);
  */
 struct lock {
         char *lk_name;
-        // add what you need here
-        // (don't forget to mark things volatile as needed)
+	struct wchan *lk_wchan;
+	struct spinlock lk_lock;
+	struct thread *volatile lk_holder;
 };
 
 struct lock *lock_create(const char *name);
@@ -113,8 +114,8 @@ bool lock_do_i_hold(struct lock *);
 
 struct cv {
         char *cv_name;
-        // add what you need here
-        // (don't forget to mark things volatile as needed)
+	struct wchan *cv_wchan;
+	struct spinlock cv_wchanlock;
 };
 
 struct cv *cv_create(const char *name);
diff -r 42983cfffb6e -r 0282fdd59c4b kern/main/main.c
--- a/kern/main/main.c	Wed Aug 05 15:58:15 2015 -0400
+++ b/kern/main/main.c	Wed Aug 05 16:01:42 2015 -0400
@@ -98,6 +98,7 @@ boot(void)
 
 	kprintf("\n");
 	kprintf("OS/161 base system version %s\n", BASE_VERSION);
+	kprintf("(with locks&CVs solution)\n");
 	kprintf("%s", harvard_copyright);
 	kprintf("\n");
 
diff -r 42983cfffb6e -r 0282fdd59c4b kern/main/menu.c
--- a/kern/main/menu.c	Wed Aug 05 15:58:15 2015 -0400
+++ b/kern/main/menu.c	Wed Aug 05 16:01:42 2015 -0400
@@ -473,9 +473,9 @@ static const char *testmenu[] = {
 	"[net] Network test                  ",
 #endif
 	"[sy1] Semaphore test                ",
-	"[sy2] Lock test             (1)     ",
-	"[sy3] CV test               (1)     ",
-	"[sy4] CV test #2            (1)     ",
+	"[sy2] Lock test                     ",
+	"[sy3] CV test                       ",
+	"[sy4] CV test #2                    ",
 	"[semu1-22] Semaphore unit tests     ",
 	"[fs1] Filesystem test               ",
 	"[fs2] FS read stress                ",
@@ -494,8 +494,6 @@ cmd_testmenu(int n, char **a)
 	(void)a;
 
 	showmenu("OS/161 tests menu", testmenu);
-	kprintf("    (1) These tests will fail until you finish the "
-		"synch assignment.\n");
 	kprintf("\n");
 
 	return 0;
diff -r 42983cfffb6e -r 0282fdd59c4b kern/thread/synch.c
--- a/kern/thread/synch.c	Wed Aug 05 15:58:15 2015 -0400
+++ b/kern/thread/synch.c	Wed Aug 05 16:01:42 2015 -0400
@@ -154,7 +154,14 @@ lock_create(const char *name)
                 return NULL;
         }
 
-        // add stuff here as needed
+	lock->lk_wchan = wchan_create(lock->lk_name);
+	if (lock->lk_wchan == NULL) {
+		kfree(lock->lk_name);
+		kfree(lock);
+		return NULL;
+	}
+	spinlock_init(&lock->lk_lock);
+	lock->lk_holder = NULL;
 
         return lock;
 }
@@ -164,7 +171,9 @@ lock_destroy(struct lock *lock)
 {
         KASSERT(lock != NULL);
 
-        // add stuff here as needed
+	KASSERT(lock->lk_holder == NULL);
+	spinlock_cleanup(&lock->lk_lock);
+	wchan_destroy(lock->lk_wchan);
 
         kfree(lock->lk_name);
         kfree(lock);
@@ -173,27 +182,44 @@ lock_destroy(struct lock *lock)
 void
 lock_acquire(struct lock *lock)
 {
-        // Write this
+	DEBUGASSERT(lock != NULL);
+        KASSERT(curthread->t_in_interrupt == false);
 
-        (void)lock;  // suppress warning until code gets written
+	spinlock_acquire(&lock->lk_lock);
+	KASSERT(lock->lk_holder != curthread);
+	while (lock->lk_holder != NULL) {
+		/* As in the semaphore. */
+                wchan_sleep(lock->lk_wchan, &lock->lk_lock);
+	}
+
+	lock->lk_holder = curthread;
+	spinlock_release(&lock->lk_lock);
 }
 
 void
 lock_release(struct lock *lock)
 {
-        // Write this
+	DEBUGASSERT(lock != NULL);
 
-        (void)lock;  // suppress warning until code gets written
+	spinlock_acquire(&lock->lk_lock);
+	KASSERT(lock->lk_holder == curthread);
+	lock->lk_holder = NULL;
+	wchan_wakeone(lock->lk_wchan, &lock->lk_lock);
+	spinlock_release(&lock->lk_lock);
 }
 
 bool
 lock_do_i_hold(struct lock *lock)
 {
-        // Write this
+	bool ret;
 
-        (void)lock;  // suppress warning until code gets written
+	DEBUGASSERT(lock != NULL);
 
-        return true; // dummy until code gets written
+	spinlock_acquire(&lock->lk_lock);
+	ret = (lock->lk_holder == curthread);
+	spinlock_release(&lock->lk_lock);
+
+        return ret;
 }
 
 ////////////////////////////////////////////////////////////
@@ -217,8 +243,14 @@ cv_create(const char *name)
                 return NULL;
         }
 
-        // add stuff here as needed
+	cv->cv_wchan = wchan_create(cv->cv_name);
+	if (cv->cv_wchan == NULL) {
+		kfree(cv->cv_name);
+		kfree(cv);
+		return NULL;
+	}
 
+	spinlock_init(&cv->cv_wchanlock);
         return cv;
 }
 
@@ -227,7 +259,8 @@ cv_destroy(struct cv *cv)
 {
         KASSERT(cv != NULL);
 
-        // add stuff here as needed
+	spinlock_cleanup(&cv->cv_wchanlock);
+	wchan_destroy(cv->cv_wchan);
 
         kfree(cv->cv_name);
         kfree(cv);
@@ -236,23 +269,35 @@ cv_destroy(struct cv *cv)
 void
 cv_wait(struct cv *cv, struct lock *lock)
 {
-        // Write this
-        (void)cv;    // suppress warning until code gets written
-        (void)lock;  // suppress warning until code gets written
+	spinlock_acquire(&cv->cv_wchanlock);
+	lock_release(lock);
+	wchan_sleep(cv->cv_wchan, &cv->cv_wchanlock);
+	/*
+	 * It is kind of silly to acquire this spinlock in wchan_sleep
+	 * and then release it right away. If we were going for
+	 * performance we might pass a flag to avoid that in this
+	 * case. Or we might use lock->lk_lock to protect the wchan
+	 * and separate out enough of the lock_acquire/lock_release
+	 * logic to make that work cleanly.
+	 */
+	spinlock_release(&cv->cv_wchanlock);
+	lock_acquire(lock);
 }
 
 void
 cv_signal(struct cv *cv, struct lock *lock)
 {
-        // Write this
-	(void)cv;    // suppress warning until code gets written
-	(void)lock;  // suppress warning until code gets written
+	(void)lock;
+	spinlock_acquire(&cv->cv_wchanlock);
+	wchan_wakeone(cv->cv_wchan, &cv->cv_wchanlock);
+	spinlock_release(&cv->cv_wchanlock);
 }
 
 void
 cv_broadcast(struct cv *cv, struct lock *lock)
 {
-	// Write this
-	(void)cv;    // suppress warning until code gets written
-	(void)lock;  // suppress warning until code gets written
+	(void)lock;
+	spinlock_acquire(&cv->cv_wchanlock);
+	wchan_wakeall(cv->cv_wchan, &cv->cv_wchanlock);
+	spinlock_release(&cv->cv_wchanlock);
 }
